{
    "Controls": [
       {
          "detected_version": "1.20",
          "id": "4",
          "node_type": "node",
          "tests": [
             {
                "desc": "Worker Node Configuration Files",
                "fail": 5,
                "info": 0,
                "pass": 1,
                "results": [
                   {
                      "actual_value": "",
                      "audit": "/bin/sh -c 'if test -e /etc/systemd/system/kubelet.service.d/10-kubeadm.conf; then stat -c permissions=%a /etc/systemd/system/kubelet.service.d/10-kubeadm.conf; fi' ",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "'permissions' is present",
                      "IsMultiple": false,
                      "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\n",
                      "scored": true,
                      "status": "FAIL",
                      "test_desc": "Ensure that the kubelet service file permissions are set to 644 or more restrictive (Automated)",
                      "test_info": [
                         "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\n"
                      ],
                      "test_number": "4.1.1",
                      "type": ""
                   },
                   {
                      "actual_value": "File not found",
                      "audit": "/bin/sh -c \"if test -e /etc/systemd/system/kubelet.service.d/10-kubeadm.conf; then stat -c %U:%G /etc/systemd/system/kubelet.service.d/10-kubeadm.conf; else echo \\\"File not found\\\"; fi\"",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "'root:root' is present OR 'File not found' is present",
                      "IsMultiple": false,
                      "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\n",
                      "scored": true,
                      "status": "PASS",
                      "test_desc": "Ensure that the kubelet service file ownership is set to root:root (Automated)",
                      "test_info": [
                         "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\n"
                      ],
                      "test_number": "4.1.2",
                      "type": ""
                   },
                   {
                      "actual_value": "",
                      "audit": "/bin/sh -c 'if test -e /etc/kubernetes/proxy.conf; then stat -c permissions=%a /etc/kubernetes/proxy.conf; fi' ",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "'permissions' is present",
                      "IsMultiple": false,
                      "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/proxy.conf\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "If proxy kubeconfig file exists ensure permissions are set to 644 or more restrictive (Manual)",
                      "test_info": [
                         "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/proxy.conf\n"
                      ],
                      "test_number": "4.1.3",
                      "type": ""
                   },
                   {
                      "actual_value": "",
                      "audit": "/bin/sh -c 'if test -e /etc/kubernetes/proxy.conf; then stat -c %U:%G /etc/kubernetes/proxy.conf; fi' ",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "'root:root' is present",
                      "IsMultiple": false,
                      "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example, chown root:root /etc/kubernetes/proxy.conf\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "If proxy kubeconfig file exists ensure ownership is set to root:root (Manual)",
                      "test_info": [
                         "Run the below command (based on the file location on your system) on the each worker node.\nFor example, chown root:root /etc/kubernetes/proxy.conf\n"
                      ],
                      "test_number": "4.1.4",
                      "type": ""
                   },
                   {
                      "actual_value": "",
                      "audit": "/bin/sh -c 'if test -e /etc/kubernetes/kubelet.conf; then stat -c permissions=%a /etc/kubernetes/kubelet.conf; fi' ",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "'permissions' is present",
                      "IsMultiple": false,
                      "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/kubelet.conf\n",
                      "scored": true,
                      "status": "FAIL",
                      "test_desc": "Ensure that the --kubeconfig kubelet.conf file permissions are set to 644 or more restrictive (Automated)",
                      "test_info": [
                         "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/kubelet.conf\n"
                      ],
                      "test_number": "4.1.5",
                      "type": ""
                   },
                   {
                      "actual_value": "",
                      "audit": "/bin/sh -c 'if test -e /etc/kubernetes/kubelet.conf; then stat -c %U:%G /etc/kubernetes/kubelet.conf; fi' ",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "'root:root' is present",
                      "IsMultiple": false,
                      "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /etc/kubernetes/kubelet.conf\n",
                      "scored": true,
                      "status": "FAIL",
                      "test_desc": "Ensure that the --kubeconfig kubelet.conf file ownership is set to root:root (Automated)",
                      "test_info": [
                         "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /etc/kubernetes/kubelet.conf\n"
                      ],
                      "test_number": "4.1.6",
                      "type": ""
                   },
                   {
                      "actual_value": "",
                      "audit": "CAFILE=$(ps -ef | grep kubelet | grep -v apiserver | grep -- --client-ca-file= | awk -F '--client-ca-file=' '{print $2}' | awk '{print $1}' | uniq)\nif test -z $CAFILE; then CAFILE=/etc/kubernetes/pki/ca.crt; fi\nif test -e $CAFILE; then stat -c permissions=%a $CAFILE; fi\n",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "'permissions' is present",
                      "IsMultiple": false,
                      "remediation": "Run the following command to modify the file permissions of the\n--client-ca-file chmod 644 <filename>\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Ensure that the certificate authorities file permissions are set to 644 or more restrictive (Manual)",
                      "test_info": [
                         "Run the following command to modify the file permissions of the\n--client-ca-file chmod 644 <filename>\n"
                      ],
                      "test_number": "4.1.7",
                      "type": ""
                   },
                   {
                      "actual_value": "",
                      "audit": "CAFILE=$(ps -ef | grep kubelet | grep -v apiserver | grep -- --client-ca-file= | awk -F '--client-ca-file=' '{print $2}' | awk '{print $1}' | uniq)\nif test -z $CAFILE; then CAFILE=/etc/kubernetes/pki/ca.crt; fi\nif test -e $CAFILE; then stat -c %U:%G $CAFILE; fi\n",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "'root:root' is present",
                      "IsMultiple": false,
                      "remediation": "Run the following command to modify the ownership of the --client-ca-file.\nchown root:root <filename>\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Ensure that the client certificate authorities file ownership is set to root:root (Manual)",
                      "test_info": [
                         "Run the following command to modify the ownership of the --client-ca-file.\nchown root:root <filename>\n"
                      ],
                      "test_number": "4.1.8",
                      "type": ""
                   },
                   {
                      "actual_value": "",
                      "audit": "/bin/sh -c 'if test -e /var/lib/kubelet/config.yaml; then stat -c permissions=%a /var/lib/kubelet/config.yaml; fi' ",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "'permissions' is present",
                      "IsMultiple": false,
                      "remediation": "Run the following command (using the config file location identified in the Audit step)\nchmod 644 /var/lib/kubelet/config.yaml\n",
                      "scored": true,
                      "status": "FAIL",
                      "test_desc": "Ensure that the kubelet --config configuration file has permissions set to 644 or more restrictive (Automated)",
                      "test_info": [
                         "Run the following command (using the config file location identified in the Audit step)\nchmod 644 /var/lib/kubelet/config.yaml\n"
                      ],
                      "test_number": "4.1.9",
                      "type": ""
                   },
                   {
                      "actual_value": "",
                      "audit": "/bin/sh -c 'if test -e /var/lib/kubelet/config.yaml; then stat -c %U:%G /var/lib/kubelet/config.yaml; fi' ",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "'root:root' is present",
                      "IsMultiple": false,
                      "remediation": "Run the following command (using the config file location identified in the Audit step)\nchown root:root /var/lib/kubelet/config.yaml\n",
                      "scored": true,
                      "status": "FAIL",
                      "test_desc": "Ensure that the kubelet --config configuration file ownership is set to root:root (Automated)",
                      "test_info": [
                         "Run the following command (using the config file location identified in the Audit step)\nchown root:root /var/lib/kubelet/config.yaml\n"
                      ],
                      "test_number": "4.1.10",
                      "type": ""
                   }
                ],
                "section": "4.1",
                "type": "",
                "warn": 4
             },
             {
                "desc": "Kubelet",
                "fail": 6,
                "info": 0,
                "pass": 0,
                "results": [
                   {
                      "actual_value": "",
                      "audit": "/bin/ps -fC $kubeletbin",
                      "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "failed to run: \"/bin/ps -fC $kubeletbin\", output: \"error: list of command names must follow -C\\n\\nUsage:\\n ps [options]\\n\\n Try 'ps --help <simple|list|output|threads|misc|all>'\\n  or 'ps --help <s|l|o|t|m|a>'\\n for additional help text.\\n\\nFor more details see ps(1).\\n\", error: exit status 1",
                      "remediation": "If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to\nfalse.\nIf using executable arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--anonymous-auth=false\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                      "scored": true,
                      "status": "FAIL",
                      "test_desc": "Ensure that the anonymous-auth argument is set to false (Automated)",
                      "test_info": [
                         "If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to\nfalse.\nIf using executable arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--anonymous-auth=false\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                      ],
                      "test_number": "4.2.1",
                      "type": ""
                   },
                   {
                      "actual_value": "",
                      "audit": "/bin/ps -fC $kubeletbin",
                      "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "failed to run: \"/bin/ps -fC $kubeletbin\", output: \"error: list of command names must follow -C\\n\\nUsage:\\n ps [options]\\n\\n Try 'ps --help <simple|list|output|threads|misc|all>'\\n  or 'ps --help <s|l|o|t|m|a>'\\n for additional help text.\\n\\nFor more details see ps(1).\\n\", error: exit status 1",
                      "remediation": "If using a Kubelet config file, edit the file to set authorization: mode to Webhook. If\nusing executable arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--authorization-mode=Webhook\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                      "scored": true,
                      "status": "FAIL",
                      "test_desc": "Ensure that the --authorization-mode argument is not set to AlwaysAllow (Automated)",
                      "test_info": [
                         "If using a Kubelet config file, edit the file to set authorization: mode to Webhook. If\nusing executable arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--authorization-mode=Webhook\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                      ],
                      "test_number": "4.2.2",
                      "type": ""
                   },
                   {
                      "actual_value": "",
                      "audit": "/bin/ps -fC $kubeletbin",
                      "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "failed to run: \"/bin/ps -fC $kubeletbin\", output: \"error: list of command names must follow -C\\n\\nUsage:\\n ps [options]\\n\\n Try 'ps --help <simple|list|output|threads|misc|all>'\\n  or 'ps --help <s|l|o|t|m|a>'\\n for additional help text.\\n\\nFor more details see ps(1).\\n\", error: exit status 1",
                      "remediation": "If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to\nthe location of the client CA file.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--client-ca-file=<path/to/client-ca-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                      "scored": true,
                      "status": "FAIL",
                      "test_desc": "Ensure that the --client-ca-file argument is set as appropriate (Automated)",
                      "test_info": [
                         "If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to\nthe location of the client CA file.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--client-ca-file=<path/to/client-ca-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                      ],
                      "test_number": "4.2.3",
                      "type": ""
                   },
                   {
                      "actual_value": "",
                      "audit": "/bin/ps -fC $kubeletbin",
                      "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "failed to run: \"/bin/ps -fC $kubeletbin\", output: \"error: list of command names must follow -C\\n\\nUsage:\\n ps [options]\\n\\n Try 'ps --help <simple|list|output|threads|misc|all>'\\n  or 'ps --help <s|l|o|t|m|a>'\\n for additional help text.\\n\\nFor more details see ps(1).\\n\", error: exit status 1",
                      "remediation": "If using a Kubelet config file, edit the file to set readOnlyPort to 0.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--read-only-port=0\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Ensure that the --read-only-port argument is set to 0 (Manual)",
                      "test_info": [
                         "If using a Kubelet config file, edit the file to set readOnlyPort to 0.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--read-only-port=0\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                      ],
                      "test_number": "4.2.4",
                      "type": ""
                   },
                   {
                      "actual_value": "",
                      "audit": "/bin/ps -fC $kubeletbin",
                      "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "failed to run: \"/bin/ps -fC $kubeletbin\", output: \"error: list of command names must follow -C\\n\\nUsage:\\n ps [options]\\n\\n Try 'ps --help <simple|list|output|threads|misc|all>'\\n  or 'ps --help <s|l|o|t|m|a>'\\n for additional help text.\\n\\nFor more details see ps(1).\\n\", error: exit status 1",
                      "remediation": "If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a\nvalue other than 0.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--streaming-connection-idle-timeout=5m\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Ensure that the --streaming-connection-idle-timeout argument is not set to 0 (Manual)",
                      "test_info": [
                         "If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a\nvalue other than 0.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--streaming-connection-idle-timeout=5m\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                      ],
                      "test_number": "4.2.5",
                      "type": ""
                   },
                   {
                      "actual_value": "",
                      "audit": "/bin/ps -fC $kubeletbin",
                      "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "failed to run: \"/bin/ps -fC $kubeletbin\", output: \"error: list of command names must follow -C\\n\\nUsage:\\n ps [options]\\n\\n Try 'ps --help <simple|list|output|threads|misc|all>'\\n  or 'ps --help <s|l|o|t|m|a>'\\n for additional help text.\\n\\nFor more details see ps(1).\\n\", error: exit status 1",
                      "remediation": "If using a Kubelet config file, edit the file to set protectKernelDefaults: true.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--protect-kernel-defaults=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                      "scored": true,
                      "status": "FAIL",
                      "test_desc": "Ensure that the --protect-kernel-defaults argument is set to true (Automated)",
                      "test_info": [
                         "If using a Kubelet config file, edit the file to set protectKernelDefaults: true.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--protect-kernel-defaults=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                      ],
                      "test_number": "4.2.6",
                      "type": ""
                   },
                   {
                      "actual_value": "",
                      "audit": "/bin/ps -fC $kubeletbin",
                      "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "failed to run: \"/bin/ps -fC $kubeletbin\", output: \"error: list of command names must follow -C\\n\\nUsage:\\n ps [options]\\n\\n Try 'ps --help <simple|list|output|threads|misc|all>'\\n  or 'ps --help <s|l|o|t|m|a>'\\n for additional help text.\\n\\nFor more details see ps(1).\\n\", error: exit status 1",
                      "remediation": "If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and\nremove the --make-iptables-util-chains argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                      "scored": true,
                      "status": "FAIL",
                      "test_desc": "Ensure that the --make-iptables-util-chains argument is set to true (Automated)",
                      "test_info": [
                         "If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and\nremove the --make-iptables-util-chains argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                      ],
                      "test_number": "4.2.7",
                      "type": ""
                   },
                   {
                      "actual_value": "",
                      "audit": "/bin/ps -fC $kubeletbin ",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "failed to run: \"/bin/ps -fC $kubeletbin\", output: \"error: list of command names must follow -C\\n\\nUsage:\\n ps [options]\\n\\n Try 'ps --help <simple|list|output|threads|misc|all>'\\n  or 'ps --help <s|l|o|t|m|a>'\\n for additional help text.\\n\\nFor more details see ps(1).\\n\", error: exit status 1",
                      "remediation": "Edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\non each worker node and remove the --hostname-override argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Ensure that the --hostname-override argument is not set (Manual)",
                      "test_info": [
                         "Edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\non each worker node and remove the --hostname-override argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                      ],
                      "test_number": "4.2.8",
                      "type": ""
                   },
                   {
                      "actual_value": "",
                      "audit": "/bin/ps -fC $kubeletbin",
                      "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "failed to run: \"/bin/ps -fC $kubeletbin\", output: \"error: list of command names must follow -C\\n\\nUsage:\\n ps [options]\\n\\n Try 'ps --help <simple|list|output|threads|misc|all>'\\n  or 'ps --help <s|l|o|t|m|a>'\\n for additional help text.\\n\\nFor more details see ps(1).\\n\", error: exit status 1",
                      "remediation": "If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Ensure that the --event-qps argument is set to 0 or a level which ensures appropriate event capture (Manual)",
                      "test_info": [
                         "If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                      ],
                      "test_number": "4.2.9",
                      "type": ""
                   },
                   {
                      "actual_value": "",
                      "audit": "/bin/ps -fC $kubeletbin",
                      "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "failed to run: \"/bin/ps -fC $kubeletbin\", output: \"error: list of command names must follow -C\\n\\nUsage:\\n ps [options]\\n\\n Try 'ps --help <simple|list|output|threads|misc|all>'\\n  or 'ps --help <s|l|o|t|m|a>'\\n for additional help text.\\n\\nFor more details see ps(1).\\n\", error: exit status 1",
                      "remediation": "If using a Kubelet config file, edit the file to set tlsCertFile to the location\nof the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile\nto the location of the corresponding private key file.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and\nset the below parameters in KUBELET_CERTIFICATE_ARGS variable.\n--tls-cert-file=<path/to/tls-certificate-file>\n--tls-private-key-file=<path/to/tls-key-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate (Manual)",
                      "test_info": [
                         "If using a Kubelet config file, edit the file to set tlsCertFile to the location\nof the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile\nto the location of the corresponding private key file.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and\nset the below parameters in KUBELET_CERTIFICATE_ARGS variable.\n--tls-cert-file=<path/to/tls-certificate-file>\n--tls-private-key-file=<path/to/tls-key-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                      ],
                      "test_number": "4.2.10",
                      "type": ""
                   },
                   {
                      "actual_value": "",
                      "audit": "/bin/ps -fC $kubeletbin",
                      "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "failed to run: \"/bin/ps -fC $kubeletbin\", output: \"error: list of command names must follow -C\\n\\nUsage:\\n ps [options]\\n\\n Try 'ps --help <simple|list|output|threads|misc|all>'\\n  or 'ps --help <s|l|o|t|m|a>'\\n for additional help text.\\n\\nFor more details see ps(1).\\n\", error: exit status 1",
                      "remediation": "If using a Kubelet config file, edit the file to add the line rotateCertificates: true or\nremove it altogether to use the default value.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and\nremove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS\nvariable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                      "scored": true,
                      "status": "FAIL",
                      "test_desc": "Ensure that the --rotate-certificates argument is not set to false (Automated)",
                      "test_info": [
                         "If using a Kubelet config file, edit the file to add the line rotateCertificates: true or\nremove it altogether to use the default value.\nIf using command line arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and\nremove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS\nvariable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                      ],
                      "test_number": "4.2.11",
                      "type": ""
                   },
                   {
                      "actual_value": "",
                      "audit": "/bin/ps -fC $kubeletbin",
                      "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "failed to run: \"/bin/ps -fC $kubeletbin\", output: \"error: list of command names must follow -C\\n\\nUsage:\\n ps [options]\\n\\n Try 'ps --help <simple|list|output|threads|misc|all>'\\n  or 'ps --help <s|l|o|t|m|a>'\\n for additional help text.\\n\\nFor more details see ps(1).\\n\", error: exit status 1",
                      "remediation": "Edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\non each worker node and set the below parameter in KUBELET_CERTIFICATE_ARGS variable.\n--feature-gates=RotateKubeletServerCertificate=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Verify that the RotateKubeletServerCertificate argument is set to true (Manual)",
                      "test_info": [
                         "Edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\non each worker node and set the below parameter in KUBELET_CERTIFICATE_ARGS variable.\n--feature-gates=RotateKubeletServerCertificate=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                      ],
                      "test_number": "4.2.12",
                      "type": ""
                   },
                   {
                      "actual_value": "",
                      "audit": "/bin/ps -fC $kubeletbin",
                      "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "failed to run: \"/bin/ps -fC $kubeletbin\", output: \"error: list of command names must follow -C\\n\\nUsage:\\n ps [options]\\n\\n Try 'ps --help <simple|list|output|threads|misc|all>'\\n  or 'ps --help <s|l|o|t|m|a>'\\n for additional help text.\\n\\nFor more details see ps(1).\\n\", error: exit status 1",
                      "remediation": "If using a Kubelet config file, edit the file to set tlsCipherSuites: to\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nor to a subset of these values.\nIf using executable arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and\nset the --tls-cipher-suites parameter as follows, or to a subset of these values.\n--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Ensure that the Kubelet only makes use of Strong Cryptographic Ciphers (Manual)",
                      "test_info": [
                         "If using a Kubelet config file, edit the file to set tlsCipherSuites: to\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nor to a subset of these values.\nIf using executable arguments, edit the kubelet service file\n/etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and\nset the --tls-cipher-suites parameter as follows, or to a subset of these values.\n--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                      ],
                      "test_number": "4.2.13",
                      "type": ""
                   }
                ],
                "section": "4.2",
                "type": "",
                "warn": 7
             }
          ],
          "text": "Worker Node Security Configuration",
          "total_fail": 11,
          "total_info": 0,
          "total_pass": 1,
          "total_warn": 11,
          "version": "cis-1.20"
       },
       {
          "detected_version": "1.20",
          "id": "5",
          "node_type": "policies",
          "tests": [
             {
                "desc": "RBAC and Service Accounts",
                "fail": 0,
                "info": 0,
                "pass": 0,
                "results": [
                   {
                      "actual_value": "",
                      "audit": "",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "Test marked as a manual test",
                      "remediation": "Identify all clusterrolebindings to the cluster-admin role. Check if they are used and\nif they need this role or if they could use a role with fewer privileges.\nWhere possible, first bind users to a lower privileged role and then remove the\nclusterrolebinding to the cluster-admin role :\nkubectl delete clusterrolebinding [name]\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Ensure that the cluster-admin role is only used where required (Manual)",
                      "test_info": [
                         "Identify all clusterrolebindings to the cluster-admin role. Check if they are used and\nif they need this role or if they could use a role with fewer privileges.\nWhere possible, first bind users to a lower privileged role and then remove the\nclusterrolebinding to the cluster-admin role :\nkubectl delete clusterrolebinding [name]\n"
                      ],
                      "test_number": "5.1.1",
                      "type": "manual"
                   },
                   {
                      "actual_value": "",
                      "audit": "",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "Test marked as a manual test",
                      "remediation": "Where possible, remove get, list and watch access to secret objects in the cluster.\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Minimize access to secrets (Manual)",
                      "test_info": [
                         "Where possible, remove get, list and watch access to secret objects in the cluster.\n"
                      ],
                      "test_number": "5.1.2",
                      "type": "manual"
                   },
                   {
                      "actual_value": "",
                      "audit": "",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "Test marked as a manual test",
                      "remediation": "Where possible replace any use of wildcards in clusterroles and roles with specific\nobjects or actions.\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Minimize wildcard use in Roles and ClusterRoles (Manual)",
                      "test_info": [
                         "Where possible replace any use of wildcards in clusterroles and roles with specific\nobjects or actions.\n"
                      ],
                      "test_number": "5.1.3",
                      "type": "manual"
                   },
                   {
                      "actual_value": "",
                      "audit": "",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "Test marked as a manual test",
                      "remediation": "Where possible, remove create access to pod objects in the cluster.\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Minimize access to create pods (Manual)",
                      "test_info": [
                         "Where possible, remove create access to pod objects in the cluster.\n"
                      ],
                      "test_number": "5.1.4",
                      "type": "manual"
                   },
                   {
                      "actual_value": "",
                      "audit": "",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "Test marked as a manual test",
                      "remediation": "Create explicit service accounts wherever a Kubernetes workload requires specific access\nto the Kubernetes API server.\nModify the configuration of each default service account to include this value\nautomountServiceAccountToken: false\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Ensure that default service accounts are not actively used. (Manual)",
                      "test_info": [
                         "Create explicit service accounts wherever a Kubernetes workload requires specific access\nto the Kubernetes API server.\nModify the configuration of each default service account to include this value\nautomountServiceAccountToken: false\n"
                      ],
                      "test_number": "5.1.5",
                      "type": "manual"
                   },
                   {
                      "actual_value": "",
                      "audit": "",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "Test marked as a manual test",
                      "remediation": "Modify the definition of pods and service accounts which do not need to mount service\naccount tokens to disable it.\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Ensure that Service Account Tokens are only mounted where necessary (Manual)",
                      "test_info": [
                         "Modify the definition of pods and service accounts which do not need to mount service\naccount tokens to disable it.\n"
                      ],
                      "test_number": "5.1.6",
                      "type": "manual"
                   },
                   {
                      "actual_value": "",
                      "audit": "",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "Test marked as a manual test",
                      "remediation": "Remove the system:masters group from all users in the cluster.\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Avoid use of system:masters group (Manual)",
                      "test_info": [
                         "Remove the system:masters group from all users in the cluster.\n"
                      ],
                      "test_number": "5.1.7",
                      "type": "manual"
                   },
                   {
                      "actual_value": "",
                      "audit": "",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "Test marked as a manual test",
                      "remediation": "Where possible, remove the impersonate, bind and escalate rights from subjects.\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Limit use of the Bind, Impersonate and Escalate permissions in the Kubernetes cluster (Manual)",
                      "test_info": [
                         "Where possible, remove the impersonate, bind and escalate rights from subjects.\n"
                      ],
                      "test_number": "5.1.8",
                      "type": "manual"
                   }
                ],
                "section": "5.1",
                "type": "",
                "warn": 8
             },
             {
                "desc": "Pod Security Policies",
                "fail": 0,
                "info": 0,
                "pass": 0,
                "results": [
                   {
                      "actual_value": "",
                      "audit": "",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "Test marked as a manual test",
                      "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that\nthe .spec.privileged field is omitted or set to false.\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Minimize the admission of privileged containers (Automated)",
                      "test_info": [
                         "Create a PSP as described in the Kubernetes documentation, ensuring that\nthe .spec.privileged field is omitted or set to false.\n"
                      ],
                      "test_number": "5.2.1",
                      "type": "manual"
                   },
                   {
                      "actual_value": "",
                      "audit": "",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "Test marked as a manual test",
                      "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostPID field is omitted or set to false.\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Minimize the admission of containers wishing to share the host process ID namespace (Automated)",
                      "test_info": [
                         "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostPID field is omitted or set to false.\n"
                      ],
                      "test_number": "5.2.2",
                      "type": "manual"
                   },
                   {
                      "actual_value": "",
                      "audit": "",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "Test marked as a manual test",
                      "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostIPC field is omitted or set to false.\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Minimize the admission of containers wishing to share the host IPC namespace (Automated)",
                      "test_info": [
                         "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostIPC field is omitted or set to false.\n"
                      ],
                      "test_number": "5.2.3",
                      "type": "manual"
                   },
                   {
                      "actual_value": "",
                      "audit": "",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "Test marked as a manual test",
                      "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostNetwork field is omitted or set to false.\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Minimize the admission of containers wishing to share the host network namespace (Automated)",
                      "test_info": [
                         "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostNetwork field is omitted or set to false.\n"
                      ],
                      "test_number": "5.2.4",
                      "type": "manual"
                   },
                   {
                      "actual_value": "",
                      "audit": "",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "Test marked as a manual test",
                      "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.allowPrivilegeEscalation field is omitted or set to false.\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Minimize the admission of containers with allowPrivilegeEscalation (Automated)",
                      "test_info": [
                         "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.allowPrivilegeEscalation field is omitted or set to false.\n"
                      ],
                      "test_number": "5.2.5",
                      "type": "manual"
                   },
                   {
                      "actual_value": "",
                      "audit": "",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "Test marked as a manual test",
                      "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.runAsUser.rule is set to either MustRunAsNonRoot or MustRunAs with the range of\nUIDs not including 0.\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Minimize the admission of root containers (Automated)",
                      "test_info": [
                         "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.runAsUser.rule is set to either MustRunAsNonRoot or MustRunAs with the range of\nUIDs not including 0.\n"
                      ],
                      "test_number": "5.2.6",
                      "type": "manual"
                   },
                   {
                      "actual_value": "",
                      "audit": "",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "Test marked as a manual test",
                      "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.requiredDropCapabilities is set to include either NET_RAW or ALL.\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Minimize the admission of containers with the NET_RAW capability (Automated)",
                      "test_info": [
                         "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.requiredDropCapabilities is set to include either NET_RAW or ALL.\n"
                      ],
                      "test_number": "5.2.7",
                      "type": "manual"
                   },
                   {
                      "actual_value": "",
                      "audit": "",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "Test marked as a manual test",
                      "remediation": "Ensure that allowedCapabilities is not present in PSPs for the cluster unless\nit is set to an empty array.\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Minimize the admission of containers with added capabilities (Automated)",
                      "test_info": [
                         "Ensure that allowedCapabilities is not present in PSPs for the cluster unless\nit is set to an empty array.\n"
                      ],
                      "test_number": "5.2.8",
                      "type": "manual"
                   },
                   {
                      "actual_value": "",
                      "audit": "",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "Test marked as a manual test",
                      "remediation": "Review the use of capabilites in applications running on your cluster. Where a namespace\ncontains applicaions which do not require any Linux capabities to operate consider adding\na PSP which forbids the admission of containers which do not drop all capabilities.\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Minimize the admission of containers with capabilities assigned (Manual)",
                      "test_info": [
                         "Review the use of capabilites in applications running on your cluster. Where a namespace\ncontains applicaions which do not require any Linux capabities to operate consider adding\na PSP which forbids the admission of containers which do not drop all capabilities.\n"
                      ],
                      "test_number": "5.2.9",
                      "type": "manual"
                   }
                ],
                "section": "5.2",
                "type": "",
                "warn": 9
             },
             {
                "desc": "Network Policies and CNI",
                "fail": 0,
                "info": 0,
                "pass": 0,
                "results": [
                   {
                      "actual_value": "",
                      "audit": "",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "Test marked as a manual test",
                      "remediation": "If the CNI plugin in use does not support network policies, consideration should be given to\nmaking use of a different plugin, or finding an alternate mechanism for restricting traffic\nin the Kubernetes cluster.\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Ensure that the CNI in use supports Network Policies (Manual)",
                      "test_info": [
                         "If the CNI plugin in use does not support network policies, consideration should be given to\nmaking use of a different plugin, or finding an alternate mechanism for restricting traffic\nin the Kubernetes cluster.\n"
                      ],
                      "test_number": "5.3.1",
                      "type": "manual"
                   },
                   {
                      "actual_value": "",
                      "audit": "",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "Test marked as a manual test",
                      "remediation": "Follow the documentation and create NetworkPolicy objects as you need them.\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Ensure that all Namespaces have Network Policies defined (Manual)",
                      "test_info": [
                         "Follow the documentation and create NetworkPolicy objects as you need them.\n"
                      ],
                      "test_number": "5.3.2",
                      "type": "manual"
                   }
                ],
                "section": "5.3",
                "type": "",
                "warn": 2
             },
             {
                "desc": "Secrets Management",
                "fail": 0,
                "info": 0,
                "pass": 0,
                "results": [
                   {
                      "actual_value": "",
                      "audit": "",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "Test marked as a manual test",
                      "remediation": "if possible, rewrite application code to read secrets from mounted secret files, rather than\nfrom environment variables.\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Prefer using secrets as files over secrets as environment variables (Manual)",
                      "test_info": [
                         "if possible, rewrite application code to read secrets from mounted secret files, rather than\nfrom environment variables.\n"
                      ],
                      "test_number": "5.4.1",
                      "type": "manual"
                   },
                   {
                      "actual_value": "",
                      "audit": "",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "Test marked as a manual test",
                      "remediation": "Refer to the secrets management options offered by your cloud provider or a third-party\nsecrets management solution.\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Consider external secret storage (Manual)",
                      "test_info": [
                         "Refer to the secrets management options offered by your cloud provider or a third-party\nsecrets management solution.\n"
                      ],
                      "test_number": "5.4.2",
                      "type": "manual"
                   }
                ],
                "section": "5.4",
                "type": "",
                "warn": 2
             },
             {
                "desc": "Extensible Admission Control",
                "fail": 0,
                "info": 0,
                "pass": 0,
                "results": [
                   {
                      "actual_value": "",
                      "audit": "",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "Test marked as a manual test",
                      "remediation": "Follow the Kubernetes documentation and setup image provenance.\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Configure Image Provenance using ImagePolicyWebhook admission controller (Manual)",
                      "test_info": [
                         "Follow the Kubernetes documentation and setup image provenance.\n"
                      ],
                      "test_number": "5.5.1",
                      "type": "manual"
                   }
                ],
                "section": "5.5",
                "type": "",
                "warn": 1
             },
             {
                "desc": "General Policies",
                "fail": 0,
                "info": 0,
                "pass": 0,
                "results": [
                   {
                      "actual_value": "",
                      "audit": "",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "Test marked as a manual test",
                      "remediation": "Follow the documentation and create namespaces for objects in your deployment as you need\nthem.\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Create administrative boundaries between resources using namespaces (Manual)",
                      "test_info": [
                         "Follow the documentation and create namespaces for objects in your deployment as you need\nthem.\n"
                      ],
                      "test_number": "5.7.1",
                      "type": "manual"
                   },
                   {
                      "actual_value": "",
                      "audit": "",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "Test marked as a manual test",
                      "remediation": "Use security context to enable the docker/default seccomp profile in your pod definitions.\nAn example is as below:\n  securityContext:\n    seccompProfile:\n      type: RuntimeDefault\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Ensure that the seccomp profile is set to docker/default in your pod definitions (Manual)",
                      "test_info": [
                         "Use security context to enable the docker/default seccomp profile in your pod definitions.\nAn example is as below:\n  securityContext:\n    seccompProfile:\n      type: RuntimeDefault\n"
                      ],
                      "test_number": "5.7.2",
                      "type": "manual"
                   },
                   {
                      "actual_value": "",
                      "audit": "",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "Test marked as a manual test",
                      "remediation": "Follow the Kubernetes documentation and apply security contexts to your pods. For a\nsuggested list of security contexts, you may refer to the CIS Security Benchmark for Docker\nContainers.\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "Apply Security Context to Your Pods and Containers (Manual)",
                      "test_info": [
                         "Follow the Kubernetes documentation and apply security contexts to your pods. For a\nsuggested list of security contexts, you may refer to the CIS Security Benchmark for Docker\nContainers.\n"
                      ],
                      "test_number": "5.7.3",
                      "type": "manual"
                   },
                   {
                      "actual_value": "",
                      "audit": "",
                      "AuditConfig": "",
                      "AuditEnv": "",
                      "expected_result": "",
                      "IsMultiple": false,
                      "reason": "Test marked as a manual test",
                      "remediation": "Ensure that namespaces are created to allow for appropriate segregation of Kubernetes\nresources and that all new resources are created in a specific namespace.\n",
                      "scored": false,
                      "status": "WARN",
                      "test_desc": "The default namespace should not be used (Manual)",
                      "test_info": [
                         "Ensure that namespaces are created to allow for appropriate segregation of Kubernetes\nresources and that all new resources are created in a specific namespace.\n"
                      ],
                      "test_number": "5.7.4",
                      "type": "manual"
                   }
                ],
                "section": "5.7",
                "type": "",
                "warn": 4
             }
          ],
          "text": "Kubernetes Policies",
          "total_fail": 0,
          "total_info": 0,
          "total_pass": 0,
          "total_warn": 26,
          "version": "cis-1.20"
       }
    ],
    "Totals": {
       "total_fail": 11,
       "total_info": 0,
       "total_pass": 1,
       "total_warn": 37
    }
 }